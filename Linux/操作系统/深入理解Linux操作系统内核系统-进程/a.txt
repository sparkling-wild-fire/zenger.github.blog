① 线程直接共享进程的所有资源 (比如 mm_struct)，所以线程就变轻了，创建线程比创建进程要快到 10 ~ 100 倍

② 线程之间共享相同的地址空间 (mm_struct)，这样利于线程之间数据高效的传输

③ 可以在一个进程中创建多个线程，实现程序的并发执行



在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息 (PCB 和 TCB)，一个进程的 PCB 会管理这个进程中所有线程的 TCB


当一个线程阻塞，那么内核可以选择另一个线程继续运行

在一个进程中，如果某个内核级线程因为发起系统调用而被阻塞，并不会影响其他内核线程的运行。因为内核级线程是被操作系统管理，受操作系统调度的

因为内核级线程是调度单位，所以操作系统将整个时间片是分配给线程的，多线程的进程获得更多的 CPU 时间


active_mm：用于指向进程所处的虚拟地址空间 (用户态或者内核态)
但Linux会把一个专门用来指向当前运行任务的指针 current 指向它，以表示它是一个正在运行的进程。

 TASK_INTERRUPTIBLE/TASK_UNINTERRUPTIBLE

① 首先，线程的创建需要的时间比进程短，因为进程在创建的时候，还需要去维护其他的一些管理信息，比如维护内存的管理，维护打开文件的关系等，而线程创建的时候，它可以直接重用它所属进程已经管理好的资源即可

因为进程的切换需要切换进程对应的页表，需要 flush TLB，会影响性能